<?xml version="1.0"?>
<doc>
    <assembly>
        <name>skwas.IO</name>
    </assembly>
    <members>
        <member name="T:skwas.IO.BinaryReaderExtensions">
            <summary>
            Extensions for <see cref="T:System.IO.BinaryReader"/>.
            </summary>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadStruct``1(System.IO.BinaryReader)">
            <summary>
            Reads a structure/class of <typeparamref name="T"/> from the current stream and advances the current position of the stream by the size of the structure in bytes.
            </summary>
            <typeparam name="T">The type to read.</typeparam>
            <param name="reader">The binary reader.</param>
            <returns>An object of specified type, read from the stream.</returns>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadStruct(System.IO.BinaryReader,System.Type)">
            <summary>
            Reads a structure/class of <paramref name="type"/> from the current stream and advances the current position of the stream by the size of the structure in bytes.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="type">The type to read.</param>
            <returns>An object of specified type, read from the stream.</returns>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadStruct``1(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a structure/class of <typeparamref name="T"/> from the current stream and advances the current position of the stream by the size of the structure in bytes.
            </summary>
            <typeparam name="T">The type to read.</typeparam>
            <param name="reader">The binary reader.</param>
            <param name="structSize">The size of the structure.</param>
            <returns>An object of specified type, read from the stream.</returns>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadStruct(System.IO.BinaryReader,System.Type,System.Int32)">
            <summary>
            Reads a structure/class of specified <paramref name="type"/> from the current stream and advances the current position of the stream by the size of the structure in bytes.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="type">The type to read.</param>
            <param name="structSize">The size of the structure.</param>
            <returns>An object of specified type, read from the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">Thrown when the requested <paramref name="structSize"/> exceeds the remaining available data.</exception>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a string from the current stream, using specified number of characters.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="characters">The number of characters to read.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadString(System.IO.BinaryReader,System.Char[])">
            <summary>
            Reads a string from the current stream. The stream is read until one of the characters is found. The terminating character is not included in the returned string.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="terminatingCharacters">The terminating characters.</param>
            <returns>The string.</returns>
            <remarks>Note that the behavior is different from ReadString which takes a string for a terminator.</remarks>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadNullTerminatedString(System.IO.BinaryReader)">
            <summary>
            Reads a null terminated string from the current stream. The stream is read until the null character is found. The terminating character is not included in the returned string.
            </summary>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadString(System.IO.BinaryReader,System.Char)">
            <summary>
            Reads a string from the current stream. The stream is read until the specified character is found. The terminating character is not included in the returned string.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="terminatingCharacter">The terminating character.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:skwas.IO.BinaryReaderExtensions.ReadString(System.IO.BinaryReader,System.String)">
            <summary>
            Reads a string from the current stream. The stream is read until the terminating string is found. The terminating string is not included in the returned string.
            </summary>
            <param name="reader">The binary reader.</param>
            <param name="terminatingString">The terminating string.</param>
            <returns>The string.</returns>
            <remarks>Note that the behavior is different from ReadString which takes a character array for a terminator.</remarks>
        </member>
        <member name="T:skwas.IO.BinaryWriterExtensions">
            <summary>
            Extensions for <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
        </member>
        <member name="M:skwas.IO.BinaryWriterExtensions.WriteNullTerminatedString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes a string to the underlying stream. The string is terminated using a '\0' character.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:skwas.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.String,System.Int32,System.Char)">
            <summary>
            Writes a fixed length string to the underlying stream. If the string is shorter that <paramref name="fixedLength"/>, it is padded using <paramref name="padWith"/>
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The string to write.</param>
            <param name="fixedLength">The fixed length of the string.</param>
            <param name="padWith">The character to pad the string with.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:skwas.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.String,System.Boolean)">
            <summary>
            Writes a string to the underlying stream. If <paramref name="lengthPrefixed"/> is true, the behavior is identical to the Write method of BinaryWriter. When false, the length prefix is skipped and the string is directly written to stream using the <see cref="T:System.Text.Encoding"/> specified for the writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The string to write.</param>
            <param name="lengthPrefixed">True to write as length prefixed string, false to write the string without length prefix.</param>
        </member>
        <member name="M:skwas.IO.BinaryWriterExtensions.Write(System.IO.BinaryWriter,System.String,System.Char)">
            <summary>
            Writes a string to the underlying stream. The string is terminated using the specified <paramref name="terminatingCharacter"/>
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The string to write.</param>
            <param name="terminatingCharacter">The terminating character.</param>
        </member>
        <member name="M:skwas.IO.BinaryWriterExtensions.WriteStruct(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes a structure/class of specified type to the current stream and advances the current position of the stream by the size of the structure in bytes.
            </summary>
            <param name="writer"></param>
            <param name="value">The structure the write to the stream.</param>
        </member>
        <member name="T:skwas.IO.Chunk`1">
            <summary>
            Represents a file chunk, which is identified via a strongly typed magic.
            </summary>
            <typeparam name="TMagic">The type of the magic.</typeparam>
        </member>
        <member name="M:skwas.IO.Chunk`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:skwas.IO.Chunk`1"/>.
            </summary>
            <param name="magic">The magic for this chunk.</param>
        </member>
        <member name="M:skwas.IO.Chunk`1.skwas#IO#IRawSerializable#Deserialize(System.IO.Stream)">
            <summary>
            When implemented, deserializes the implemented class from specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:skwas.IO.Chunk`1.skwas#IO#IRawSerializable#Serialize(System.IO.Stream)">
            <summary>
            When implemented, serializes the implemented class to specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="P:skwas.IO.Chunk`1.skwas#IO#IChunk#Magic">
            <summary>
            Gets or sets the magic.
            </summary>
        </member>
        <member name="P:skwas.IO.Chunk`1.Magic">
            <summary>
            Gets or sets the magic.
            </summary>
        </member>
        <member name="P:skwas.IO.Chunk`1.Size">
            <summary>
            Gets or sets the size of the chunk.
            </summary>
        </member>
        <member name="P:skwas.IO.Chunk`1.FileOffset">
            <summary>
            Gets or sets the file offset.
            </summary>
        </member>
        <member name="P:skwas.IO.Chunk`1.ParentFile">
            <summary>
            Gets or sets the parent file.
            </summary>
        </member>
        <member name="M:skwas.IO.Chunk`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:skwas.IO.Chunk`1.Bytes">
            <summary>
            Gets array of raw chunk bytes. This array is only filled if inheritors did not fully implement deserialization.
            </summary>
        </member>
        <member name="M:skwas.IO.Chunk`1.Deserialize(System.IO.Stream)">
            <summary>
            When implemented, deserializes the implemented class from specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:skwas.IO.Chunk`1.Serialize(System.IO.Stream)">
            <summary>
            When implemented, serializes the implemented class to specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:skwas.IO.ChunkFile`1.Dispose">
            <summary>
            Releases all resources associated with this object.
            </summary>
        </member>
        <member name="P:skwas.IO.ChunkFile`1.Chunks">
            <summary>
            Gets a collection of all chunks in the ChunkFile.
            </summary>
        </member>
        <member name="T:skwas.IO.ChunkReader`2">
            <summary>
            Represents a reader with which <see cref="T:skwas.IO.IChunk"/>'s can be read from a stream.
            </summary>
            <typeparam name="TMagic">The type of the magic.</typeparam>
            <typeparam name="TChunk">The type of the chunk.</typeparam>
        </member>
        <member name="M:skwas.IO.ChunkReader`2.#ctor(System.IO.Stream,skwas.IO.IChunkResolver,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:skwas.IO.ChunkReader`2"/>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="chunkResolver">The resolver to use to find the type associated with the magic.</param>
            <param name="leaveOpen">True to leave the stream open.</param>
        </member>
        <member name="M:skwas.IO.ChunkReader`2.Finalize">
            <summary>
            Clean up any remaining resources.
            </summary>
        </member>
        <member name="M:skwas.IO.ChunkReader`2.Dispose(System.Boolean)">
            <summary>
            Release managed and unmanaged resources.
            </summary>
            <param name="disposing">True if disposing.</param>
        </member>
        <member name="M:skwas.IO.ChunkReader`2.Dispose">
            <summary>
            Releases all resources associated with this <see cref="T:skwas.IO.ChunkReader`2"/> object.
            </summary>
        </member>
        <member name="P:skwas.IO.ChunkReader`2.IsDisposed">
            <summary>
            Gets whether the object is disposed.
            </summary>
        </member>
        <member name="P:skwas.IO.ChunkReader`2.BaseStream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="M:skwas.IO.ChunkReader`2.ReadMagic">
            <summary>
            Reads the magic from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:skwas.IO.ChunkReader`2.Read">
            <summary>
            Reads the next chunk from the stream or returns null if no more chunks are available.
            </summary>
            <returns></returns>
        </member>
        <member name="T:skwas.IO.ChunkWriter`2">
            <summary>
            Represents a writer with which <see cref="T:skwas.IO.IChunk"/>'s can be written to a stream.
            </summary>
            <typeparam name="TMagic">The type of the magic.</typeparam>
            <typeparam name="TChunk">The type of the chunk.</typeparam>
        </member>
        <member name="M:skwas.IO.ChunkWriter`2.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:skwas.IO.ChunkWriter`2"/>.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="leaveOpen">True to leave the stream open.</param>
        </member>
        <member name="M:skwas.IO.ChunkWriter`2.Finalize">
            <summary>
            Clean up any remaining resources.
            </summary>
        </member>
        <member name="M:skwas.IO.ChunkWriter`2.Dispose(System.Boolean)">
            <summary>
            Release managed and unmanaged resources.
            </summary>
            <param name="disposing">True if disposing.</param>
        </member>
        <member name="M:skwas.IO.ChunkWriter`2.Dispose">
            <summary>
            Releases all resources associated with this <see cref="T:skwas.IO.ChunkWriter`2"/> object.
            </summary>
        </member>
        <member name="P:skwas.IO.ChunkWriter`2.IsDisposed">
            <summary>
            Gets whether the object is disposed.
            </summary>
        </member>
        <member name="P:skwas.IO.ChunkWriter`2.BaseStream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="M:skwas.IO.ChunkWriter`2.WriteMagic(`0)">
            <summary>
            Writes the magic to the stream.
            </summary>
            <param name="magic">The magic.</param>
        </member>
        <member name="M:skwas.IO.ChunkWriter`2.WriteMagic(`1)">
            <summary>
            Writes the chunk magic to the stream.
            </summary>
            <param name="chunk">The chunk to write the magic of.</param>
        </member>
        <member name="M:skwas.IO.ChunkWriter`2.Write(`1)">
            <summary>
            Writes the specified <paramref name="chunk"/> to the stream.
            </summary>
            <param name="chunk">The chunk to write to stream.</param>
        </member>
        <member name="T:skwas.IO.IChunk">
            <summary>
            Represents a file chunk, which is identified via a magic.
            </summary>
        </member>
        <member name="P:skwas.IO.IChunk.Magic">
            <summary>
            Gets or sets the magic.
            </summary>
        </member>
        <member name="P:skwas.IO.IChunk.Size">
            <summary>
            Gets or sets the size of the chunk.
            </summary>
        </member>
        <member name="P:skwas.IO.IChunk.FileOffset">
            <summary>
            Gets or sets the file offset.
            </summary>
        </member>
        <member name="P:skwas.IO.IChunk.ParentFile">
            <summary>
            Gets or sets the parent file.
            </summary>
        </member>
        <member name="T:skwas.IO.IChunk`1">
            <summary>
            Represents a file chunk, which is identified via a strongly typed magic.
            </summary>
            <typeparam name="TMagic">The type of the magic.</typeparam>
        </member>
        <member name="P:skwas.IO.IChunk`1.Magic">
            <summary>
            Gets or sets the magic.
            </summary>
        </member>
        <member name="T:skwas.IO.IChunkResolver">
            <summary>
            Resolves a chunk type by a magic.
            </summary>
        </member>
        <member name="M:skwas.IO.IChunkResolver.Resolve(System.Object)">
            <summary>
            Resolves the type that is associated with the specified magic.
            </summary>
            <param name="magic">The magic to resolve a type for.</param>
            <returns>The type or null if the magic is not supported/implemented.</returns>
        </member>
        <member name="T:skwas.IO.IChunkResolver`1">
            <summary>
            Resolves a chunk type by a magic.
            </summary>
            <typeparam name="TMagic"></typeparam>
        </member>
        <member name="M:skwas.IO.IChunkResolver`1.Resolve(`0)">
            <summary>
            Resolves the type that is associated with the specified magic.
            </summary>
            <param name="magic">The magic to resolve a type for.</param>
            <returns>The type or null if the magic is not supported/implemented.</returns>
        </member>
        <member name="M:skwas.IO.GenericList`1.Move(`0,System.Int32)">
            <summary>
            Moves an item to a new index in the collection.
            </summary>
            <param name="item">The item to move.</param>
            <param name="offset">The number of places to move. This is relative to the current position in the collection.</param>
            <returns>The new position in the collection.</returns>
        </member>
        <member name="T:skwas.IO.IRawSerializable">
            <summary>
            Describes a type that can be (de)serialized directly from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:skwas.IO.IRawSerializable.Deserialize(System.IO.Stream)">
            <summary>
            When implemented, deserializes the implemented class from specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:skwas.IO.IRawSerializable.Serialize(System.IO.Stream)">
            <summary>
            When implemented, serializes the implemented class to specified <paramref name="stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:skwas.IO.RegionStream">
            <summary>
            Wraps a stream into a specific isolated region.
            </summary>
        </member>
        <member name="M:skwas.IO.RegionStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:skwas.IO.RegionStream"/>. The specified stream will be wrapped and access is only allowed from the current stream position and with a fixed <paramref name="length"/>.
            </summary>
            <param name="stream"></param>
            <param name="length"></param>
            <param name="forReading"></param>
        </member>
        <member name="M:skwas.IO.RegionStream.Move(System.Int64,System.Int64)">
            <summary>
            Moves the stream region to the new start position and length. Note that this method can only be called if the stream is in 'read' mode. A stream in write mode, cannot be moved.
            </summary>
            <param name="startPosition">The start position in the base stream.</param>
            <param name="length">The length of the region in the base stream.</param>
        </member>
        <member name="P:skwas.IO.RegionStream.BaseStream">
            <summary>
            Gets the base stream.
            </summary>
        </member>
        <member name="P:skwas.IO.RegionStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
        </member>
        <member name="P:skwas.IO.RegionStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
        </member>
        <member name="P:skwas.IO.RegionStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
        </member>
        <member name="M:skwas.IO.RegionStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="P:skwas.IO.RegionStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:skwas.IO.RegionStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:skwas.IO.RegionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:skwas.IO.RegionStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:skwas.IO.RegionStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:skwas.IO.RegionStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occured, such as the specified file cannot be found.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/> was called after the stream was closed.</exception>
        </member>
        <member name="M:skwas.IO.RegionStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:skwas.IO.RegionStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:skwas.IO.Resources.UnmanagedStream">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.Argument_StreamNotReadable">
            <summary>
              Looks up a localized string similar to Stream does not support reading..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.Argument_StreamNotSeekable">
            <summary>
              Looks up a localized string similar to Stream does not support seeking..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.Argument_StreamNotWriteable">
            <summary>
              Looks up a localized string similar to Stream does not support writing..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.IOException_StreamCantFlush">
            <summary>
              Looks up a localized string similar to Stream can&apos;t be flushed..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.IOException_StreamGetLength">
            <summary>
              Looks up a localized string similar to Unable to get length of stream..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.IOException_StreamNotInitialized">
            <summary>
              Looks up a localized string similar to Stream can&apos;t be initialized..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.IOException_StreamRead">
            <summary>
              Looks up a localized string similar to Unable to read from stream..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.IOException_StreamSeek">
            <summary>
              Looks up a localized string similar to Unable to seek in stream..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.IOException_StreamSetLength">
            <summary>
              Looks up a localized string similar to Unable to set size of stream..
            </summary>
        </member>
        <member name="P:skwas.IO.Resources.UnmanagedStream.IOException_StreamWrite">
            <summary>
              Looks up a localized string similar to Unable to write to stream..
            </summary>
        </member>
        <member name="T:skwas.IO.UnmanagedStream">
            <summary>
            Encapsulates an unmanaged IStream to provide access from managed code.
            </summary>
            <remarks>Other implementations are not as complete as my current implementation (as far as I have found), and do not support for instance, reading to or writing from an offset in a byte array, or assume each IStream is always both readable and writeable, or are required to be compiled using unsafe context (for using unchecked pointers).</remarks>
        </member>
        <member name="M:skwas.IO.UnmanagedStream.#ctor(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:skwas.IO.UnmanagedStream"/> using the specified <see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/>. 
            </summary>
            <param name="stream">The <see cref="T:System.Runtime.InteropServices.ComTypes.IStream"/> to encapsulate.</param>
            <param name="releaseOnDispose">When true, <see cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)"/> will be called on the stream.</param>
        </member>
        <member name="M:skwas.IO.UnmanagedStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by <see cref="T:skwas.IO.UnmanagedStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:skwas.IO.UnmanagedStream.CanRead">
            <summary>
            Gets a value indicating whether a stream supports reading.
            </summary>
        </member>
        <member name="P:skwas.IO.UnmanagedStream.CanSeek">
            <summary>
            Gets a value indicating whether a stream supports seeking.
            </summary>
        </member>
        <member name="P:skwas.IO.UnmanagedStream.CanWrite">
            <summary>
            Gets a value indicating whether a stream supports writing.
            </summary>
        </member>
        <member name="M:skwas.IO.UnmanagedStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="P:skwas.IO.UnmanagedStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:skwas.IO.UnmanagedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="M:skwas.IO.UnmanagedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:skwas.IO.UnmanagedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns></returns>
        </member>
        <member name="M:skwas.IO.UnmanagedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:skwas.IO.UnmanagedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
    </members>
</doc>
